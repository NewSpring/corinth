enum ACTION_FEATURE_ACTION {
  READ_CONTENT
  READ_EVENT
}

type ActionListAction {
  id: ID!
  title: String
  subtitle: String
  image: ImageMedia
  relatedNode: Node
  action: ACTION_FEATURE_ACTION
}

type ActionListFeature implements Feature & Node {
  id: ID!
  order: Int
  title: String
  subtitle: String
  actions: [ActionListAction]
}

input AnalyticsDeviceInfo {
  platform: AnalyticsPlatform
  deviceId: String
  deviceModel: String
  osVersion: String
  appVersion: String
}

input AnalyticsIdentifyInput {
  traits: [AnalyticsMetaField]
  anonymousId: String!
  deviceInfo: AnalyticsDeviceInfo
}

input AnalyticsMetaField {
  field: String!
  value: AnalyticsValue
}

enum AnalyticsPlatform {
  iOS
  Android
}

type AnalyticsResult {
  success: Boolean
}

input AnalyticsTrackInput {
  eventName: String!
  properties: [AnalyticsMetaField]
  anonymousId: String
  deviceInfo: AnalyticsDeviceInfo
}

scalar AnalyticsValue

type AudioMedia implements Media {
  name: String
  key: String
  sources: [AudioMediaSource]
}

type AudioMediaSource implements MediaSource {
  uri: String
}

type AuthenticatedUser {
  id: ID!
  profile: Person
  rock: RockPersonDetails
  rockToken: String @deprecated(reason: "Use rock.authCookie instead")
}

type Authentication {
  user: AuthenticatedUser
  token: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Campus implements Node {
  id: ID!
  name: String
  street1: String
  street2: String
  city: String
  state: String
  postalCode: String
  latitude: Float
  longitude: Float
  image: ImageMediaSource
  distanceFromLocation(location: CampusLocationInput): Float
  events: [Event]
}

input CampusLocationInput {
  latitude: Float!
  longitude: Float!
}

"""A rgb color string"""
scalar Color

type ContentChannel implements Node {
  id: ID!
  name: String
  description: String
  childContentChannels: [ContentChannel]
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  iconName: String
}

interface ContentItem {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type ContentItemsConnection {
  edges: [ContentItemsConnectionEdge]
  totalCount: Int
  pageInfo: PaginationInfo
}

type ContentItemsConnectionEdge {
  node: ContentItem
  cursor: String
}

input ContentItemsConnectionInput {
  first: Int
  after: String
}

type ContentSeriesContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  scriptures: [Scripture]
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
  features: [Feature]
}

type DevotionalContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  scriptures: [Scripture]
  isLiked: Boolean
  likedCount: Int
  series: ContentItem @deprecated(reason: "Use seriesConnection")
  seriesConnection: SeriesConnection
  sharing: SharableContentItem
}

type Event implements Node {
  id: ID!
  name: String
  description: String
  location: String
  start: String
  end: String
  image: ImageMedia
}

interface Feature {
  id: ID!
  order: Int
}

enum GENDER {
  Male
  Female
  Unknown
}

type Group implements Node {
  id: ID!
  name: String
  leader: Person @deprecated(reason: "No longer used, use 'leaders' instead")
  leaders: [Person]
  members: [Person]
}

enum GROUP_TYPE {
  Serving
  Community
  Family
  Fuse
  Rally
}

type HeaderFeature implements Feature & Node {
  id: ID!
  order: Int
  body: String
  sharing: SharableFeature
}

type ImageMedia implements Media {
  name: String
  key: String
  sources: [ImageMediaSource]
}

type ImageMediaSource implements MediaSource {
  uri: String
}

enum LIKE_OPERATION {
  Like
  Unlike
}

input LikeEntityInput {
  nodeId: ID!
  operation: LIKE_OPERATION!
}

type LiveStream {
  isLive: Boolean
  eventStartTime: String
  media: VideoMedia
  webViewUrl: String
  contentItem: ContentItem
}

interface Media {
  name: String
  key: String
  sources: [MediaSource]
}

type MediaContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  scriptures: [Scripture]
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

enum MediaInputType {
  IMAGE
  VIDEO
  AUDIO
}

interface MediaSource {
  uri: String
}

type Mutation {
  _placeholder: Boolean
  updateLikeEntity(input: LikeEntityInput!): ContentItem
  authenticate(identity: String!, password: String!): Authentication
  changePassword(password: String!): Authentication
  registerPerson(email: String!, password: String!): Authentication
  requestSmsLoginPin(phoneNumber: String!): SmsPinResult
  authenticateWithSms(phoneNumber: String!, pin: String!): Authentication
  identifySelf(input: AnalyticsIdentifyInput!): AnalyticsResult
  trackEvent(input: AnalyticsTrackInput!): AnalyticsResult
  updateUserPushSettings(input: PushSettingsInput!): Person
  updateUserCampus(campusId: String!): Person
  updateProfileField(input: UpdateProfileInput!): Person
  updateProfileFields(input: [UpdateProfileInput]!): Person
  uploadProfileImage(file: Upload!, size: Int!): Person
  addPrayer(text: String!, isAnonymous: Boolean): Prayer
  deletePrayer(nodeId: String!): Prayer
  incrementPrayerCount(nodeId: String!): Prayer
  flagPrayer(nodeId: String!): Prayer
  savePrayer(nodeId: String!): Prayer
  unSavePrayer(nodeId: String!): Prayer
}

interface Node {
  id: ID!
}

type NoteFeature implements Feature & Node {
  id: ID!
  order: Int
  placeholder: String
}

type PaginationInfo {
  startCursor: String
  endCursor: String
}

type Pass implements Node {
  id: ID!
  type: PassType
  description: String
  logo: ImageMediaSource
  thumbnail: ImageMediaSource
  barcode: ImageMediaSource
  primaryFields: [PassField]
  secondaryFields: [PassField]
  backgroundColor: Color
  foregroundColor: Color
  labelColor: Color
  logoText: String
  passkitFileUrl: String
}

type PassField {
  key: String!
  label: String
  value: String!
  textAlignment: PassFieldTextAlignment
}

enum PassFieldTextAlignment {
  LEFT
  CENTER
  RIGHT
  NATURAL
}

enum PassType {
  GENERIC
}

type Person implements Node {
  id: ID!
  firstName: String
  lastName: String
  nickName: String
  email: String
  gender: GENDER
  birthDate: String
  photo: ImageMediaSource
  campus: Campus
  groups(type: GROUP_TYPE, asLeader: Boolean): [Group]
  impersonationParameter: String! @deprecated(reason: "No longer used.")
  isGroupLeader: Boolean
  isStaff: Boolean
}

type Prayer implements Node {
  id: ID!
  firstName: String @deprecated(reason: "Use requestor.firstName")
  lastName: String @deprecated(reason: "Use requestor.lastName.")
  text: String!
  enteredDateTime: String! @deprecated(reason: "Use startTime")
  startTime: String!
  flagCount: Int
  prayerCount: Int
  categoryId: Int @deprecated(reason: "Not supported")
  campus: Campus @deprecated(reason: "Use requestor.campus")
  createdByPersonAliasId: Int @deprecated(reason: "Use requestor")
  requestedByPersonAliasId: Int @deprecated(reason: "Use requestor")
  person: Person @deprecated(reason: "Use requestor")
  requestor: Person
  isAnonymous: Boolean
  isSaved: Boolean
  isPrayedFor: Boolean
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

type PrayerMenuCategory implements Node {
  id: ID!
  key: String!
  title: String!
  subtitle: String
  imageURL: String
  overlayColor: String @deprecated(reason: "Never changes")
}

enum PrayerType {
  CAMPUS
  USER
  GROUP
  SAVED
}

input PushSettingsInput {
  enabled: Boolean
  pushProviderUserId: String
}

type Query {
  _placeholder: Boolean
  node(id: ID!): Node
  likedContent(first: Int, after: String): ContentItemsConnection
  contentChannels: [ContentChannel]
  campaigns: ContentItemsConnection
  userFeed(first: Int, after: String): ContentItemsConnection
  personaFeed(first: Int, after: String): ContentItemsConnection
  contentItemFromSlug(slug: String!): ContentItem
  currentUser: AuthenticatedUser
  liveStream: LiveStream @deprecated(reason: "Use liveStreams, there may be multiple.")
  liveStreams: [LiveStream]
  scripture(query: String!, version: VERSION): Scripture @deprecated(reason: "Use 'scriptures' instead.")
  scriptures(query: String!, version: VERSION): [Scripture]
  userPass: Pass
  search(query: String!, first: Int, after: String): SearchResultsConnection
  campuses(location: CampusLocationInput): [Campus]
  userFeedFeatures: [Feature]
  forgotPasswordURL: String
  prayers(type: PrayerType): [Prayer]
  prayerMenuCategories: [PrayerMenuCategory]
  campusPrayers: [Prayer] @deprecated(reason: "Use prayers(type:SAVED)")
  userPrayers: [Prayer] @deprecated(reason: "Use prayers(type:USER)")
  groupPrayers: [Prayer] @deprecated(reason: "Use prayers(type:GROUP)")
  savedPrayers: [Prayer] @deprecated(reason: "Use prayers(type:CAMPUS)")
}

type RockPersonDetails {
  authToken: String
  authCookie: String
}

type Scripture implements Node {
  id: ID!
  html: String
  reference: String
  copyright: String
  version: String
}

type ScriptureFeature implements Feature & Node {
  id: ID!
  order: Int
  scriptures: [Scripture]
  sharing: SharableFeature
}

type SearchResult {
  cursor: String
  title: String
  summary: String
  coverImage: ImageMedia
  node: Node
}

type SearchResultsConnection {
  edges: [SearchResult]
  pageInfo: PaginationInfo
}

type SeriesConnection {
  series: ContentItem
  itemCount: Int
  itemIndex(id: String): Int
}

interface Sharable {
  message: String
  title: String
  url: String @deprecated(reason: "Not supported on the interface")
}

type SharableContentItem implements Sharable {
  message: String
  title: String
  url: String
}

type SharableFeature implements Sharable {
  message: String
  title: String
  url: String @deprecated(reason: "Not supported on a feature")
}

type SmsPinResult {
  success: Boolean
}

type TextFeature implements Feature & Node {
  id: ID!
  order: Int
  body: String
  sharing: SharableFeature
}

type Theme {
  type: ThemeType
  colors: ThemeColors
}

type ThemeColors {
  primary: Color
  secondary: Color
  screen: Color
  paper: Color
  alert: Color
}

enum ThemeType {
  LIGHT
  DARK
}

type UniversalContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  isLiked: Boolean
  likedCount: Int
  sharing: SharableContentItem
}

enum UPDATEABLE_PROFILE_FIELDS {
  FirstName
  LastName
  Email
  NickName
  Gender
  BirthDate
}

input UpdateProfileInput {
  field: UPDATEABLE_PROFILE_FIELDS!
  value: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

enum VERSION {
  WEB
  KJV
}

type VideoMedia implements Media {
  name: String
  key: String
  sources: [VideoMediaSource]
  embedHtml: String
  thumbnail: ImageMedia
}

type VideoMediaSource implements MediaSource {
  uri: String
}

type WeekendContentItem implements ContentItem & Node {
  id: ID!
  title(hyphenated: Boolean): String
  coverImage: ImageMedia
  images: [ImageMedia]
  videos: [VideoMedia]
  audios: [AudioMedia]
  htmlContent: String
  summary: String
  childContentItemsConnection(first: Int, after: String): ContentItemsConnection
  siblingContentItemsConnection(first: Int, after: String): ContentItemsConnection
  parentChannel: ContentChannel
  theme: Theme
  isLiked: Boolean
  likedCount: Int
  communicator: Person @deprecated(reason: "Use communicators")
  communicators: [Person]
  guestCommunicators: [String]
  sermonDate: String
  series: ContentItem @deprecated(reason: "Use seriesConnection")
  seriesConnection: SeriesConnection
  liveStream: LiveStream
  sharing: SharableContentItem
  features: [Feature]
}

